// Initially there are n blocks on the table (numbered from 0 to n-1) with 
// block bi adjacent to block bi+1 for all 0 <= i < n-1.
// find_block find the pile and height of block a
// clear_above clear the h and more high of p pile and get them to primitive place
// pile_onto move the h and more high of p plie to the p2 pile. 
#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
using namespace std;

const int maxn = 30;
int n;
vector<int> pile[maxn];

void find_block(int a, int &p, int &h)
{
    for(p = 0; p < n; p++)
        for(h = 0; h < pile[p].size(); h++)
            if(pile[p][h] == a)
                return;
}

void clear_above(int p, int h)
{
    for(int i = h+1; i < pile[p].size(); i++)
    {
        int b = pile[p][i];
        pile[b].push_back(b);
    }
    pile[p].resize(h+1);
}

void pile_onto(int p, int h, int p2)
{
    for(int i = h; i < pile[p].size(); i++)
        pile[p2].push_back(pile[p][i]);
    pile[p].resize(h);
}

void print()
{
    for(int i = 0; i < n; i++)
    {
        printf("%d:", i);
        for(int j = 0; j < pile[i].size(); j++)
            printf(" %d", pile[i][j]);
        printf("\n");
    }
}

int main()
{
    int a, b;
    cin >> n;
    string s1, s2;
    for(int i = 0; i < n; i++) pile[i].push_back(i);
    while(cin >> s1 >> a >> s2 >> b && s1 != "quit")
    {
        int pa, pb, ha, hb;
        find_block(a, pa, ha);
        find_block(b, pb, hb);
        if(pa == pb) continue;
        if(s2 == "onto") clear_above(pb, hb);
        if(s1 == "move") clear_above(pa, ha);
        pile_onto(pa, ha, pb);
    }
    print();
    return 0;
}
