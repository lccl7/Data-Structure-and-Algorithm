//Sampling Input:
4  //number of dot
16 //number of intersecting lines
H 1 1
H 1 3
H 2 1
H 2 2
H 2 3
H 3 2
H 4 2
H 4 3
V 1 1
V 2 1
V 2 2
V 2 3
V 3 2
V 4 1
V 4 2
V 4 3

2
3
H 1 1
H 2 1
V 2 1
//Sampling Output:
Problem #1:
2 squares of size 1
1 squares of size 2
*******************
Problem #2:
No completed squares can be found
//use 2 arrays to indicate whether there is a line(1 is yes and 0 no)
//when count the size, we use a flag to test the two dots of a line
#include <stdio.h>
#include <string.h>
const int N = 10;
int H[N][N], V[N][N];
char vh[N];
void setline(char*, int, int);
int count(int, int);

int main()
{
    int n, m, kase = 0;
    while(scanf("%d%d",&n, &m)== 2)
    {
        memset(H, 0, sizeof(H));
        memset(V, 0, sizeof(V));
        int x, y, sum = 0;
        while(m--)
        {
            scanf("%s%d%d", vh, &x, &y);
            setline(vh, x, y);
        }

        if(kase++) puts("*******************************");
        printf("Problem #%d\n", kase);

        for(int length = 1; length < n; length++)
        {
            int cnt = count(length, n);
            if(cnt)
            {
                sum += cnt;
                printf("%d squares of size %d\n", cnt, length);
            }
        }
        if(!sum)
            puts("No completed squares can be found.");
    }
}

void setline(char* c, int i, int j)
{
    if('H' == c[0])
    {
        H[i][j] = 1;
    }
    else {
        V[j][i] = 1;
    }
}

int count(int size, int n)
{
    int cnt = 0, flag = 0;
    for(int i = 1; i+size <= n; i++)
        for(int j = 1; j+size <= n; j++)
        {
            flag = 1;
            for(int h = j; h < j+size; h++)
                if(!H[i][h] || !H[i+size][h]) flag = 0;
            for(int v = i; v < i+size; v++)
                if(!V[v][j] || !V[v][j+size]) flag = 0;
            cnt += flag;
        }
    return cnt;
}
