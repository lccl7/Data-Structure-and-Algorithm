// The input file will contain one or more test cases. Each test case begins with 
// the number of teams t 1 <= t < 1000. Then t team descriptions follow, each one
// consisting of the number of elements belonging to the team and the elements themselves. 
// Elements are integers in the range 0-999999. A team may consist of up to 1000 elements.
// Finally, a list of commands follows. There are three different kinds of commands:
// ENQUEUE x - enter element x into the team queue
// DEQUEUE - process the first element and remove it from the queue
// STOP - end of test case 

// Use a map called team[x] to represent what team x belongs.
// Then queue qforteam is used for that when a player is in the team, we should remember the team number
// and queue qforplayer is used for store person.
The input will be terminated by a value of 0 for t. 
#include <iostream>
#include <queue>
#include <map>
#include <string>
using std::string;
using std::cin;
using std::cout;
using std::endl;
using std::queue;
using std::map;
const int maxt = 100;

int main()
{
    int t, kase = 0;

    while(cin >> t && t)
    {
        cout << "Scenario #" << ++kase << endl;
        map<int, int> team;
        for(int i = 0; i < t; i++)
        {
            int n, x;
            cin >> n;
            while(n--)
            {
                cin >> x;
                team[x] = i;
            }
        }

        queue<int> qforteam, qforplayer[maxt];
        string cmd;
        while(true)
        {
            int x;
            cin >> cmd;
            if(cmd == "STOP") break;
            else if(cmd == "DEQUEUE")
            {
                int t = qforteam.front();
                cout << qforplayer[t].front() << endl;
                qforplayer[t].pop();
                if(qforplayer[t].empty()) qforteam.pop();
            }
            else if(cmd == "ENQUEUE")
            {
                cin >> x;
                int t = team[x];
                if(qforplayer[t].empty()) qforteam.push(t);
                qforplayer[t].push(x);
            }
        }
        cout << endl;
    }
    return 0;
}
