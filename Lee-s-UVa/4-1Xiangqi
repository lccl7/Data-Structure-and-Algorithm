Sampling Input:
//The first row are 3 numbers: the first is the number of the red ones,
//the second and the third number is the place where the black is.
2 1 4
G 10 5
R 6 4

3 1 5
H 4 5
G 10 5
C 7 5

0 0 0

//directions is where the black general can go, that number is 4.
//horse is the place the black general can reach, which is 8
//ctrh is the place once there is another chessman, the horse is out of checking, the place 
//should corresponds with the position of horse.
//When test the rook position 'R', we should remember that no other chessman between 
//the road from the black general to the rook 
#include <stdio.h>
#include <string.h>
const int N = 12;
char brd[N][N];
int direction[][2] = {{1,0}, {-1,0}, {0,1}, {0,-1}};
int horse[][2] = {{-2,1}, {-2,-1}, {2,1}, {2,-1}, {1,2}, {1,-2}, {-1,2},{-1,-2}};
int  ctrh[][2] = {{-1,1}, {-1,-1}, {1,1}, {1,-1}, {1,1}, {1,-1}, {-1,1},{-1,-1}};
int canon[2][2];
char red[7];

int check(int, int);

int main()
{
    int redn, blkr, blkc;
    while(scanf("%d%d%d", &redn, &blkr, &blkc) == 3 && redn && blkr && blkc)
    {
        memset(brd, 0, sizeof(brd));
        canon[0][0] = canon[0][1] = canon[1][0] = canon[1][1] = 0;

        while(redn--)
        {
            int redx, redy;
            scanf("%s%d%d", red, &redx, &redy);
            if('C' == red[0])
            {
                if(canon[0][0]) canon[1][0] = redx, canon[1][1] = redy;
                else canon[0][0] = redx, canon[0][1] = redy;
            }
            brd[redx][redy] = red[0];
        }

        int cnt = 0;
        for(int i = 0; i < 4; i++)
            cnt += check(blkr + direction[i][0], blkc + direction[i][1]);
        if(cnt < 4)
            puts("No!");
        else {
            puts("Yes!");
        }
    }
    return 0;
}

int check(int r, int c)
{
    if(r < 1 || r > 3 || c < 4 || c > 6) return 1;
    for(int i = r-1; i > 0; i--)
    {
        if(brd[i][c])
            if('R' == brd[i][c]) return 1;
            else break;
    }

    for(int i = r+1; i <= 10; i++)
    {
        if(brd[i][c])
            if('R' == brd[i][c] || 'G' == brd[i][c]) return 1;
            else break;
    }

    for(int j = c-1; j > 0; j--)
    {
        if(brd[r][j])
            if('R' == brd[r][j]) return 1;
            else break;
    }

    for(int j = c+1; j <= 9; j++)
    {
        if(brd[r][j])
            if('R' == brd[r][j]) return 1;
            else break;
    }

    for(int k = 0; k < 2; k++)
    {
        if(r == canon[k][0])
        {
            int cnt = 0;
            for(int j = c-1; j > canon[k][1]; j--)
                if(brd[r][j]) cnt++;
            if(1 == cnt) return 1;
            for(int j = c+1; j < canon[k][1]; j++)
                if(brd[r][j]) cnt++;
            if(1 == cnt) return 1;
        }
        if(c == canon[k][1])
        {
            int cnt = 0;
            for(int j = r-1; j > canon[k][0]; j--)
                if(brd[j][c]) cnt++;
            if(1 == cnt) return 1;
            for(int j = c+1; j < canon[k][1]; j++)
                if(brd[j][c]) cnt++;
            if(1 == cnt) return 1;
        }
    }

    for(int k = 0; k < 8; k++)
    {
        int tr = r + horse[k][0], tc = c + horse[k][1];
        int ntr = r + ctrh[k][0], ntc = c + ctrh[k][1];
        if(tr < 1 || tr > 10 || tc < 1 || tc > 9)
            continue;
        if('H' == brd[tr][tc] && !brd[ntr][ntc])
            return 1;
    }
    return 0;
}
